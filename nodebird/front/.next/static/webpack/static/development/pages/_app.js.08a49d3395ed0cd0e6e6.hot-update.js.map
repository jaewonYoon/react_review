{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.08a49d3395ed0cd0e6e6.hot-update.js","sources":["webpack:///./sagas/user.js"],"sourcesContent":["import {all, fork, takeLatest, call, put ,take} from 'redux-saga/effects';\r\nimport {LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAILURE} from '../reducers/user';\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\nfunction loginAPI() {\r\n    //서버에 API 요청을 보내는 부분 \r\n}\r\nfunction* login(){\r\n    try{\r\n        yield call(loginAPI); //실패하면 catch(e)로 \r\n        yield put({ //loginAPI 성공 \r\n            type: LOG_IN_SUCCESS\r\n        })\r\n    } catch(e) {\r\n        console.error(e); \r\n        yield put( {//loginAPI 실패 \r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogin() {\r\n    while(true){\r\n        yield take(LOG_IN);\r\n        // put 은 redux의 distpatch와 동일하게 작동하게 된다.\r\n        // 로그인 액션을 받으면 자동으로 LOG_IN_SUCCESS를 실행하게 된다.  \r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n        })\r\n    }\r\n}\r\nexport default function* userSaga() {\r\n    yield all([\r\n        watchLogin(),\r\n        // watchSignUp()\r\n    ]) \r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAQA;;;AAaA;;;AAUA;AACA;AAhCA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAGA;AAAA;AACA;AADA;AACA;AAJA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AAPA;AAQA;AAAA;AACA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAKA;AACA;AADA;AACA;AANA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}