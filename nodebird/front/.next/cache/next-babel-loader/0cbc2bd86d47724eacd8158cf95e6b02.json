{"ast":null,"code":"import { all, fork, put, takeEvery, call, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\n\nfunction* addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true //로그인 사람만 글 적을 수 있게. 쿠키같이 전송 \n\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); //addPostAPI의 postData 로 들어간다.\n\n    console.log(result);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* loadMainPostsAPI() {\n  axios.get('/posts').then(res => {\n    return res;\n  });\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI); //loadMainPostAPI의 postData 로 들어간다.\n\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction addCommentAPI() {} // ADD_COMMENT_REQUEST에 대한 action \n\n\nfunction* addComment(action) {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadMainPosts), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/Users/jaewon/Desktop/web/react_review/nodebird/front/sagas/post.js"],"names":["all","fork","put","takeEvery","call","takeLatest","delay","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","addPostAPI","postData","post","withCredentials","addPost","action","result","data","console","log","type","e","error","watchAddPost","loadMainPostsAPI","get","then","res","loadMainPosts","watchLoadMainPosts","addCommentAPI","addComment","postId","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all,fork, put, takeEvery, call, takeLatest, delay} from 'redux-saga/effects'\r\nimport axios from 'axios'; \r\nimport { \r\n    ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\r\n    ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE,\r\n    LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE\r\n} from '../reducers/post';\r\n\r\n\r\nfunction* addPostAPI(postData){\r\n    return axios.post('/post',postData, {\r\n        withCredentials: true,  //로그인 사람만 글 적을 수 있게. 쿠키같이 전송 \r\n    });\r\n\r\n}\r\nfunction* addPost(action) {\r\n    try{\r\n        const result = yield call(addPostAPI, action.data) //addPostAPI의 postData 로 들어간다.\r\n        console.log(result);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data \r\n        })\r\n    } catch(e){ \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n\r\nfunction* loadMainPostsAPI(){\r\n    axios.get('/posts').then((res) => {\r\n        return res; \r\n    });\r\n\r\n}\r\nfunction* loadMainPosts() {\r\n    try{\r\n        const result = yield call(loadMainPostsAPI); //loadMainPostAPI의 postData 로 들어간다.\r\n        \r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch(e){ \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\n\r\nfunction addCommentAPI(){\r\n    \r\n}\r\n// ADD_COMMENT_REQUEST에 대한 action \r\nfunction* addComment(action) {\r\n    try{\r\n        yield delay(2000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                postId: action.data.postId\r\n            }\r\n        }); \r\n    } catch(e) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e \r\n        })\r\n    }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadMainPosts),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}