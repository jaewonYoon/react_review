{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, delay, call, put, takeLatest, takeEvery } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user'; // take은 기다리고 자동으로 .next()함수를 호출해주는 것, put은 dispatch해주는 것 \n\nfunction loginAPI(loginData) {\n  //서버에 API 요청을 보내는 부분 \n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data); //실패하면 catch(e)로 \n\n    yield put({\n      //loginAPI 성공 \n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      //loginAPI 실패 \n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login); //disaptch에서 action으로 들어가는 것 위의 login(action)으로 전달 됨 \n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout', {}, {\n    widthCredentials: true\n  });\n}\n\nfunction* logout() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction loadUserAPI() {\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_FAILURE\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction* signUpAPI(signUpData) {\n  return axios.post('/user', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    // 첫번째 인자는 함수, 두번쨰 인자는 첫번째 함수 인자로 전달된다. \n    yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignUp), fork(watchLoadUser)]);\n}","map":{"version":3,"sources":["C:/Users/jaewon/Desktop/web/react_review/nodebird/front/sagas/user.js"],"names":["axios","all","fork","delay","call","put","takeLatest","takeEvery","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","loginAPI","loginData","post","withCredentials","login","action","result","data","type","e","console","error","watchLogin","logOutAPI","widthCredentials","logout","watchLogout","loadUserAPI","get","loadUser","watchLoadUser","signUpAPI","signUpData","signUp","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, delay, call, put ,takeLatest, takeEvery} from 'redux-saga/effects';\r\nimport {\r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n    LOG_OUT_REQUEST,LOG_OUT_SUCCESS,LOG_OUT_FAILURE,\r\n    LOAD_USER_REQUEST,LOAD_USER_SUCCESS,LOAD_USER_FAILURE\r\n} from '../reducers/user';\r\n// take은 기다리고 자동으로 .next()함수를 호출해주는 것, put은 dispatch해주는 것 \r\n\r\n\r\nfunction loginAPI(loginData) {\r\n    //서버에 API 요청을 보내는 부분 \r\n    return axios.post('/user/login', loginData, {\r\n        withCredentials:true\r\n    });\r\n}\r\nfunction* login(action){\r\n    try{\r\n        const result = yield call(loginAPI, action.data); //실패하면 catch(e)로 \r\n        yield put({ //loginAPI 성공 \r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch(e) {\r\n        console.error(e); \r\n        yield put( {//loginAPI 실패 \r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST, login); //disaptch에서 action으로 들어가는 것 위의 login(action)으로 전달 됨 \r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/user/logout',{},{ \r\n    widthCredentials:true });\r\n}\r\nfunction* logout() {\r\n    try{\r\n        yield call(logOutAPI);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS\r\n        });\r\n    }catch(e){\r\n        yield put({\r\n            type: LOG_OUT_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogout() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logout);\r\n}\r\n\r\n\r\nfunction loadUserAPI() {\r\n    return axios.get('/user/',{\r\n        withCredentials: true\r\n    });\r\n}\r\nfunction* loadUser() {\r\n    try{\r\n        const result = yield call(loadUserAPI);\r\n        yield put({\r\n            type: LOAD_USER_SUCCESS,\r\n            data: result.data\r\n        });\r\n    }catch(e){\r\n        yield put({\r\n            type: LOAD_USER_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadUser() {\r\n    yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\n\r\nfunction* signUpAPI(signUpData) {\r\n    return axios.post('/user', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try{\r\n        // 첫번째 인자는 함수, 두번쨰 인자는 첫번째 함수 인자로 전달된다. \r\n        yield call(signUpAPI,action.data);\r\n        yield put({\r\n            type:SIGN_UP_SUCCESS,\r\n        });\r\n    }catch(e) {\r\n        console.error(e);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error: e \r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n        fork(watchSignUp),\r\n        fork(watchLoadUser)\r\n    ]) \r\n}"]},"metadata":{},"sourceType":"module"}