{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPostAPI),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPostsAPI),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, put, takeEvery, call, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE } from '../reducers/post';\n\nfunction addPostAPI(postData) {\n  return _regeneratorRuntime.wrap(function addPostAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", axios.post('/post/', postData, {\n            withCredentials: true\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          //addPostAPI의 postData 로 들어간다.\n          console.log(result);\n          _context2.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context2.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction loadMainPostsAPI() {\n  return _regeneratorRuntime.wrap(function loadMainPostsAPI$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", axios.get('/posts').then(function (res) {\n            return res;\n          }));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadMainPosts() {\n  var result, newResult;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return _Object$assign([], result.map(function (item) {\n            return item.dataValues;\n          }));\n\n        case 6:\n          newResult = _context5.sent;\n          _context5.next = 9;\n          return console.log(newResult);\n\n        case 9:\n          _context5.next = 11;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 11:\n          _context5.next = 17;\n          break;\n\n        case 13:\n          _context5.prev = 13;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 17;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 17:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 13]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction addCommentAPI() {} // ADD_COMMENT_REQUEST에 대한 action \n\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context7.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId\n            }\n          });\n\n        case 5:\n          _context7.next = 11;\n          break;\n\n        case 7:\n          _context7.prev = 7;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context7.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadMainPosts), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/Users/jaewon/Desktop/web/react_review/nodebird/front/sagas/post.js"],"names":["addPostAPI","addPost","watchAddPost","loadMainPostsAPI","loadMainPosts","watchLoadMainPosts","addComment","watchAddComment","postSaga","all","fork","put","takeEvery","call","takeLatest","delay","axios","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_FAILURE","postData","post","withCredentials","action","data","result","console","log","type","error","get","then","res","map","item","dataValues","newResult","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import {all,fork, put, takeEvery, call, takeLatest, delay} from 'redux-saga/effects'\r\nimport axios from 'axios'; \r\nimport { \r\n    ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST,\r\n    ADD_COMMENT_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_FAILURE,\r\n    LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_FAILURE\r\n} from '../reducers/post';\r\n\r\n\r\nfunction* addPostAPI(postData){\r\n    return axios.post('/post/',postData, {\r\n        withCredentials: true, \r\n    });\r\n\r\n}\r\nfunction* addPost(action) {\r\n    try{\r\n        const result = yield call(addPostAPI, action.data) //addPostAPI의 postData 로 들어간다.\r\n        console.log(result);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data \r\n        })\r\n    } catch(e){ \r\n        yield put({\r\n            type:ADD_POST_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\n\r\nfunction* loadMainPostsAPI(){\r\n    return axios.get('/posts').then((res) => {\r\n        return res;\r\n    });\r\n\r\n}\r\nfunction* loadMainPosts() {\r\n    try{\r\n        const result = yield call(loadMainPostsAPI); //loadMainPostAPI의 postData 로 들어간다.\r\n        \r\n        const newResult = yield Object.assign([], result.map(item => {\r\n            return item.dataValues\r\n        }));\r\n        yield console.log(newResult); \r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch(e){ \r\n        yield put({\r\n            type:LOAD_MAIN_POSTS_FAILURE,\r\n            error: e\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadMainPosts() {\r\n    yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\n\r\nfunction addCommentAPI(){\r\n    \r\n}\r\n// ADD_COMMENT_REQUEST에 대한 action \r\nfunction* addComment(action) {\r\n    try{\r\n        yield delay(2000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data:{\r\n                postId: action.data.postId\r\n            }\r\n        }); \r\n    } catch(e) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e \r\n        })\r\n    }\r\n}\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadMainPosts),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}