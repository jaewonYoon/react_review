{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaewon\\\\Desktop\\\\web\\\\react_review\\\\nodebird\\\\front\\\\components\\\\PostCard.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Icon, Button, Avatar, Input, List, Comment, Form } from 'antd';\nimport PropTypes from 'prop-types';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"post.content\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \"\\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, item.User.nickname[0]),\n        content: item.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/jaewon/Desktop/web/react_review/nodebird/front/components/PostCard.jsx"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","Card","Icon","Button","Avatar","Input","List","Comment","Form","PropTypes","ADD_COMMENT_REQUEST","PostCard","post","dispatch","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","User","nickname","Comments","length","item","content","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React,{useState, useCallback, useEffect} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {Card, Icon, Button, Avatar, Input,List, Comment,Form} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\nconst PostCard =({post}) => {\r\n    const dispatch = useDispatch();\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const {me} = useSelector(state => state.user);\r\n    const {commentAdded, isAddingComment} = useSelector(state => state.post); \r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n    },[]);\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!me){\r\n            return alert('로그인이 필요합니다.'); \r\n        }\r\n        dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data:{\r\n                postId: post.id \r\n            }\r\n        });\r\n    },[me&&me.id]);\r\n\r\n    useEffect( () => {\r\n        setCommentText(''); \r\n    },[commentAdded ===true])\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value); \r\n    }, []);\r\n    return(\r\n        <div>\r\n        <Card \r\n            key={+post.createdAt}\r\n            cover={post.img && <img alt=\"example\" src={post.img} />}\r\n            actions={[\r\n                <Icon type=\"retweet\" key=\"retweet\" />,\r\n                <Icon type=\"heart\" key=\"heart\" />,\r\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\r\n                <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n            ]}\r\n            extra={<Button>팔로우</Button>}\r\n        >\r\n            <Card.Meta\r\n                avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title={post.User.nickname}\r\n                description={<div>post.content</div>}\r\n            />\r\n        </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit = {onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value = {commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length: 0}댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem= {item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}                                                                                                                                                           \r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes ={\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content:PropTypes.string,\r\n        img:PropTypes.string,\r\n        createdAt:PropTypes.object\r\n    })\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}