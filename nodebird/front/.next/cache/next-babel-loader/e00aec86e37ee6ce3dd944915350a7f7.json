{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, delay, call, put, takeLatest, takeEvery } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from '../reducers/user'; // take은 기다리고 자동으로 .next()함수를 호출해주는 것, put은 dispatch해주는 것 \n\nfunction loginAPI() {//서버에 API 요청을 보내는 부분 \n  // return axios.post('/login');\n}\n\nfunction* login() {\n  try {\n    yield delay(2000);\n    yield call(loginAPI); //실패하면 catch(e)로 \n\n    yield put({\n      //loginAPI 성공 \n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      //loginAPI 실패 \n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* logout() {\n  try {\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logout);\n}\n\nfunction* signUpAPI() {\n  return axios.post('/login');\n}\n\nfunction* signUp() {\n  try {\n    yield call(signUpAPI);\n    yield delay(2000);\n    throw new Error('에러에러에러');\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/jaewon/Desktop/web/react_review/nodebird/front/sagas/user.js"],"names":["axios","all","fork","delay","call","put","takeLatest","takeEvery","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","loginAPI","login","type","e","console","error","watchLogin","logout","watchLogout","signUpAPI","post","signUp","Error","watchSignUp","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,UAArC,EAAiDC,SAAjD,QAAiE,oBAAjE;AACA,SACIC,cADJ,EACoBC,cADpB,EACoCC,cADpC,EAEIC,eAFJ,EAEqBC,eAFrB,EAEsCC,eAFtC,EAGIC,eAHJ,EAGoBC,eAHpB,EAGoCC,eAHpC,QAIO,kBAJP,C,CAKA;;AAEA,SAASC,QAAT,GAAoB,CAChB;AACA;AACH;;AACD,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,IAAI,CAACa,QAAD,CAAV,CAFD,CAEuB;;AACtB,UAAMZ,GAAG,CAAC;AAAE;AACRc,MAAAA,IAAI,EAAEV;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAMW,CAAN,EAAS;AACPC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMf,GAAG,CAAE;AAAC;AACRc,MAAAA,IAAI,EAAET;AADC,KAAF,CAAT;AAGH;AACJ;;AACD,UAAUa,UAAV,GAAuB;AACnB,QAAMhB,SAAS,CAACC,cAAD,EAAiBU,KAAjB,CAAf;AACH;;AAED,UAAUM,MAAV,GAAmB;AACf,MAAG;AACC,UAAMnB,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH,GAJD,CAIC,OAAMK,CAAN,EAAQ;AACL,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAAEH;AADA,KAAD,CAAT;AAGH;AACJ;;AACD,UAAUS,WAAV,GAAwB;AACpB,QAAMnB,UAAU,CAACQ,eAAD,EAAkBU,MAAlB,CAAhB;AACH;;AACD,UAAUE,SAAV,GAAsB;AAClB,SAAO1B,KAAK,CAAC2B,IAAN,CAAW,QAAX,CAAP;AACH;;AAED,UAAUC,MAAV,GAAmB;AACf,MAAG;AACC,UAAMxB,IAAI,CAACsB,SAAD,CAAV;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,UAAM,IAAI0B,KAAJ,CAAU,QAAV,CAAN;AACA,UAAMxB,GAAG,CAAC;AACNc,MAAAA,IAAI,EAACP;AADC,KAAD,CAAT;AAGH,GAPD,CAOC,OAAMQ,CAAN,EAAS;AACNC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMf,GAAG,CAAC;AACNc,MAAAA,IAAI,EAACN,eADC;AAENS,MAAAA,KAAK,EAAEF;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUU,WAAV,GAAwB;AACpB,QAAMvB,SAAS,CAACI,eAAD,EAAkBiB,MAAlB,CAAf;AACH;;AAGD,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAM9B,GAAG,CAAC,CACNC,IAAI,CAACqB,UAAD,CADE,EAENrB,IAAI,CAACuB,WAAD,CAFE,EAGNvB,IAAI,CAAC4B,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, delay, call, put ,takeLatest, takeEvery} from 'redux-saga/effects';\r\nimport {\r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n    LOG_OUT_REQUEST,LOG_OUT_SUCCESS,LOG_OUT_FAILURE\r\n} from '../reducers/user';\r\n// take은 기다리고 자동으로 .next()함수를 호출해주는 것, put은 dispatch해주는 것 \r\n\r\nfunction loginAPI() {\r\n    //서버에 API 요청을 보내는 부분 \r\n    // return axios.post('/login');\r\n}\r\nfunction* login(){\r\n    try{\r\n        yield delay(2000);\r\n        yield call(loginAPI); //실패하면 catch(e)로 \r\n        yield put({ //loginAPI 성공 \r\n            type: LOG_IN_SUCCESS\r\n        })\r\n    } catch(e) {\r\n        console.error(e); \r\n        yield put( {//loginAPI 실패 \r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction* logout() {\r\n    try{\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS\r\n        });\r\n    }catch(e){\r\n        yield put({\r\n            type: LOG_OUT_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogout() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logout);\r\n}\r\nfunction* signUpAPI() {\r\n    return axios.post('/login');\r\n}\r\n\r\nfunction* signUp() {\r\n    try{\r\n        yield call(signUpAPI);\r\n        yield delay(2000);\r\n        throw new Error('에러에러에러');\r\n        yield put({\r\n            type:SIGN_UP_SUCCESS,\r\n        });\r\n    }catch(e) {\r\n        console.error(e);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error: e \r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n        fork(watchSignUp),\r\n    ]) \r\n}"]},"metadata":{},"sourceType":"module"}