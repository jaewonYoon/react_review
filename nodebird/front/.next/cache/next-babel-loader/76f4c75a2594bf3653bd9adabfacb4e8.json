{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, takeLatest, call, put, takeEvery } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {\n  //서버에 API 요청을 보내는 부분 \n  return axios.post('/login');\n}\n\nfunction* login() {\n  try {\n    yield delay(2000);\n    yield call(loginAPI); //실패하면 catch(e)로 \n\n    yield put({\n      //loginAPI 성공 \n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      //loginAPI 실패 \n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction* signUpAPI() {\n  return axios.post('/login');\n}\n\nfunction* signUp() {}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([watchLogin()]);\n}","map":{"version":3,"sources":["C:/Users/jaewon/Desktop/web/react_review/nodebird/front/sagas/user.js"],"names":["axios","all","fork","takeLatest","call","put","takeEvery","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","HELLO_SAGA","loginAPI","post","login","delay","type","e","console","error","watchLogin","signUpAPI","signUp","watchSignUp","SIGN_REQUEST","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA2CC,SAA3C,QAA2D,oBAA3D;AACA,SACIC,cADJ,EACoBC,cADpB,EACoCC,cADpC,EAEIC,eAFJ,EAEqBC,eAFrB,EAEsCC,eAFtC,QAGO,kBAHP;AAKA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,SAASC,QAAT,GAAoB;AAChB;AACA,SAAOd,KAAK,CAACe,IAAN,CAAW,QAAX,CAAP;AACH;;AACD,UAAUC,KAAV,GAAiB;AACb,MAAG;AACC,UAAMC,KAAK,CAAC,IAAD,CAAX;AACA,UAAMb,IAAI,CAACU,QAAD,CAAV,CAFD,CAEuB;;AACtB,UAAMT,GAAG,CAAC;AAAE;AACRa,MAAAA,IAAI,EAAEV;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAMW,CAAN,EAAS;AACPC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMd,GAAG,CAAE;AAAC;AACRa,MAAAA,IAAI,EAAET;AADC,KAAF,CAAT;AAGH;AACJ;;AACD,UAAUa,UAAV,GAAuB;AACnB,QAAMhB,SAAS,CAACC,cAAD,EAAiBS,KAAjB,CAAf;AACH;;AAED,UAAUO,SAAV,GAAsB;AAClB,SAAOvB,KAAK,CAACe,IAAN,CAAW,QAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB,CAElB;;AAED,UAAUC,WAAV,GAAwB;AACpB,QAAMnB,SAAS,CAACoB,YAAD,EAAeF,MAAf,CAAf;AACH;;AAGD,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAM1B,GAAG,CAAC,CACNqB,UAAU,EADJ,CAAD,CAAT;AAGH","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, takeLatest, call, put , takeEvery} from 'redux-saga/effects';\r\nimport {\r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE\r\n} from '../reducers/user';\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA'; \r\n\r\nfunction loginAPI() {\r\n    //서버에 API 요청을 보내는 부분 \r\n    return axios.post('/login');\r\n}\r\nfunction* login(){\r\n    try{\r\n        yield delay(2000);\r\n        yield call(loginAPI); //실패하면 catch(e)로 \r\n        yield put({ //loginAPI 성공 \r\n            type: LOG_IN_SUCCESS\r\n        })\r\n    } catch(e) {\r\n        console.error(e); \r\n        yield put( {//loginAPI 실패 \r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction* signUpAPI() {\r\n    return axios.post('/login');\r\n}\r\n\r\nfunction* signUp() {\r\n\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        watchLogin(),\r\n    ]) \r\n}"]},"metadata":{},"sourceType":"module"}