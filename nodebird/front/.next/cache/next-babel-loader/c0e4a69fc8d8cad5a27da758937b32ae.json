{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logout),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogout),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUser),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUser),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUpAPI),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport axios from 'axios';\nimport { all, fork, delay, call, put, takeLatest, takeEvery } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE } from '../reducers/user'; // take은 기다리고 자동으로 .next()함수를 호출해주는 것, put은 dispatch해주는 것 \n\naxios.defaults.baseURL = 'http://localhost:3002/api';\n\nfunction loginAPI(loginData) {\n  console.log(loginData); //서버에 API 요청을 보내는 부분 \n\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            //loginAPI 성공 \n            type: LOG_IN_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            //loginAPI 실패 \n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction logout() {\n  return _regeneratorRuntime.wrap(function logout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logOutAPI, {}, {\n            widthCredentials: true\n          });\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadUserAPI() {\n  return axios.get('/user/', {\n    withCredentials: true\n  });\n}\n\nfunction loadUser() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadUserAPI);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_USER_SUCCESS\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_USER_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadUser() {\n  return _regeneratorRuntime.wrap(function watchLoadUser$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_USER_REQUEST, loadUser);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction signUpAPI(signUpData) {\n  return _regeneratorRuntime.wrap(function signUpAPI$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          return _context7.abrupt(\"return\", axios.post('/user', signUpData));\n\n        case 1:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context8.next = 5;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context8.next = 12;\n          break;\n\n        case 7:\n          _context8.prev = 7;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context8.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchSignUp), fork(watchLoadUser)]);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}","map":{"version":3,"sources":["C:/Users/jaewon/Desktop/web/react_review/nodebird/front/sagas/user.js"],"names":["login","watchLogin","logout","watchLogout","loadUser","watchLoadUser","signUpAPI","signUp","watchSignUp","userSaga","axios","all","fork","delay","call","put","takeLatest","takeEvery","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","defaults","baseURL","loginAPI","loginData","console","log","post","withCredentials","action","data","result","type","error","logOutAPI","widthCredentials","loadUserAPI","get","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","signUpData"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport {all, fork, delay, call, put ,takeLatest, takeEvery} from 'redux-saga/effects';\r\nimport {\r\n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\r\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\r\n    LOG_OUT_REQUEST,LOG_OUT_SUCCESS,LOG_OUT_FAILURE\r\n} from '../reducers/user';\r\n// take은 기다리고 자동으로 .next()함수를 호출해주는 것, put은 dispatch해주는 것 \r\n\r\naxios.defaults.baseURL = 'http://localhost:3002/api'; \r\n\r\nfunction loginAPI(loginData) {\r\n    console.log(loginData);\r\n    //서버에 API 요청을 보내는 부분 \r\n    return axios.post('/user/login', loginData, {\r\n        withCredentials:true\r\n    });\r\n}\r\nfunction* login(action){\r\n    try{\r\n        const result = yield call(loginAPI, action.data); //실패하면 catch(e)로 \r\n        yield put({ //loginAPI 성공 \r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch(e) {\r\n        console.error(e); \r\n        yield put( {//loginAPI 실패 \r\n            type: LOG_IN_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN_REQUEST, login); //disaptch에서 action으로 들어가는 것 위의 login(action)으로 전달 됨 \r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/user/logout');\r\n}\r\nfunction* logout() {\r\n    try{\r\n        yield call(logOutAPI,{}, {\r\n            widthCredentials:true \r\n        });\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS\r\n        });\r\n    }catch(e){\r\n        yield put({\r\n            type: LOG_OUT_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLogout() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logout);\r\n}\r\n\r\n\r\nfunction loadUserAPI() {\r\n    return axios.get('/user/',{\r\n        withCredentials: true\r\n    });\r\n}\r\nfunction* loadUser() {\r\n    try{\r\n        const result = yield call(loadUserAPI);\r\n        yield put({\r\n            type: LOAD_USER_SUCCESS\r\n        });\r\n    }catch(e){\r\n        yield put({\r\n            type: LOAD_USER_FAILURE\r\n        })\r\n    }\r\n}\r\nfunction* watchLoadUser() {\r\n    yield takeLatest(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\n\r\nfunction* signUpAPI(signUpData) {\r\n    return axios.post('/user', signUpData);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try{\r\n        // 첫번째 인자는 함수, 두번쨰 인자는 첫번째 함수 인자로 전달된다. \r\n        yield call(signUpAPI,action.data);\r\n        yield put({\r\n            type:SIGN_UP_SUCCESS,\r\n        });\r\n    }catch(e) {\r\n        console.error(e);\r\n        yield put({\r\n            type:SIGN_UP_FAILURE,\r\n            error: e \r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n        fork(watchSignUp),\r\n        fork(watchLoadUser)\r\n    ]) \r\n}"]},"metadata":{},"sourceType":"module"}