{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jaewon\\\\Desktop\\\\web\\\\react_review\\\\nodebird\\\\front\\\\components\\\\PostCard.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Icon, Button, Avatar, Input, List, Comment, Form } from 'antd';\nimport PropTypes from 'prop-types';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(Card, {\n    key: +post.createdAt,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"\\uD314\\uB85C\\uC6B0\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, post.content),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0}댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, item.User.nickname[0]),\n      content: item.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/jaewon/Desktop/web/react_review/nodebird/front/components/PostCard.jsx"],"names":["React","useState","useCallback","useEffect","useSelector","useDispatch","Card","Icon","Button","Avatar","Input","List","Comment","Form","PropTypes","ADD_COMMENT_REQUEST","PostCard","post","dispatch","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","User","nickname","content","Comments","length","item","propTypes","shape","object","string"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,WAAxB,EAAqCC,SAArC,QAAqD,OAArD;AACA,SAAQC,WAAR,EAAoBC,WAApB,QAAsC,aAAtC;AACA,SAAQC,IAAR,EAAcC,IAAd,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,KAApC,EAA0CC,IAA1C,EAAgDC,OAAhD,EAAwDC,IAAxD,QAAmE,MAAnE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AACA,MAAMC,QAAQ,GAAE,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AACxB,QAAMC,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAA,OAACc,iBAAD;AAAA,OAAoBC;AAApB,MAA4CnB,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM;AAAA,OAACoB,WAAD;AAAA,OAAcC;AAAd,MAAgCrB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAACsB,IAAAA;AAAD,MAAOnB,WAAW,CAACoB,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAxB;AACA,QAAM;AAACC,IAAAA,YAAD;AAAeC,IAAAA;AAAf,MAAkCvB,WAAW,CAACoB,KAAK,IAAIA,KAAK,CAACP,IAAhB,CAAnD;AACA,QAAMW,eAAe,GAAG1B,WAAW,CAAC,MAAM;AACtCkB,IAAAA,oBAAoB,CAACS,IAAI,IAAI,CAACA,IAAV,CAApB;AACH,GAFkC,EAEjC,EAFiC,CAAnC;AAGA,QAAMC,eAAe,GAAG5B,WAAW,CAAE6B,CAAD,IAAO;AACvCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAG,CAACT,EAAJ,EAAO;AACH,aAAOU,KAAK,CAAC,aAAD,CAAZ;AACH;;AACDf,IAAAA,QAAQ,CAAC;AACLgB,MAAAA,IAAI,EAAEnB,mBADD;AAELoB,MAAAA,IAAI,EAAC;AACDC,QAAAA,MAAM,EAAEnB,IAAI,CAACoB;AADZ;AAFA,KAAD,CAAR;AAMH,GAXkC,EAWjC,CAACd,EAAE,IAAEA,EAAE,CAACc,EAAR,CAXiC,CAAnC;AAaAlC,EAAAA,SAAS,CAAE,MAAM;AACbmB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH,GAFQ,EAEP,CAACI,YAAY,KAAI,IAAjB,CAFO,CAAT;AAGA,QAAMY,mBAAmB,GAAGpC,WAAW,CAAE6B,CAAD,IAAO;AAC3CT,IAAAA,cAAc,CAACS,CAAC,CAACQ,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAEpC,EAFoC,CAAvC;AAGA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,IAAD;AACI,IAAA,GAAG,EAAE,CAACvB,IAAI,CAACwB,SADf;AAEI,IAAA,KAAK,EAAExB,IAAI,CAACyB,GAAL,IAAY;AAAK,MAAA,GAAG,EAAC,SAAT;AAAmB,MAAA,GAAG,EAAEzB,IAAI,CAACyB,GAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFvB;AAGI,IAAA,OAAO,EAAE,CACL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,EAEL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,OAAX;AAAmB,MAAA,GAAG,EAAC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFK,EAGL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,GAAG,EAAC,SAAzB;AAAmC,MAAA,OAAO,EAAEd,eAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHK,EAIL,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,GAAG,EAAC,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJK,CAHb;AASI,IAAA,KAAK,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWI,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASX,IAAI,CAAC0B,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CADZ;AAEI,IAAA,KAAK,EAAE3B,IAAI,CAAC0B,IAAL,CAAUC,QAFrB;AAGI,IAAA,WAAW,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM3B,IAAI,CAAC4B,OAAX,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,CADA,EAkBK1B,iBAAiB,IACd,4BACI,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAIW,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAE,CAAtB;AAAyB,IAAA,KAAK,EAAIT,WAAlC;AAA+C,IAAA,QAAQ,EAAEiB,mBAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEX,eAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,CADJ,EAOI,MAAC,IAAD;AACI,IAAA,MAAM,EAAG,GAAEV,IAAI,CAAC6B,QAAL,GAAgB7B,IAAI,CAAC6B,QAAL,CAAcC,MAA9B,GAAsC,CAAE,IADvD;AAEI,IAAA,UAAU,EAAC,YAFf;AAGI,IAAA,UAAU,EAAE9B,IAAI,CAAC6B,QAAL,IAAiB,EAHjC;AAII,IAAA,UAAU,EAAGE,IAAI,IACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,OAAD;AACI,MAAA,MAAM,EAAEA,IAAI,CAACL,IAAL,CAAUC,QADtB;AAEI,MAAA,MAAM,EAAE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAASI,IAAI,CAACL,IAAL,CAAUC,QAAV,CAAmB,CAAnB,CAAT,CAFZ;AAGI,MAAA,OAAO,EAAEI,IAAI,CAACH,OAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CAnBR,CADJ;AA6CH,CAzED;;AA2EA7B,QAAQ,CAACiC,SAAT,GAAoB;AAChBhC,EAAAA,IAAI,EAAEH,SAAS,CAACoC,KAAV,CAAgB;AAClBP,IAAAA,IAAI,EAAE7B,SAAS,CAACqC,MADE;AAElBN,IAAAA,OAAO,EAAC/B,SAAS,CAACsC,MAFA;AAGlBV,IAAAA,GAAG,EAAC5B,SAAS,CAACsC,MAHI;AAIlBX,IAAAA,SAAS,EAAC3B,SAAS,CAACqC;AAJF,GAAhB;AADU,CAApB;AASA,eAAenC,QAAf","sourcesContent":["import React,{useState, useCallback, useEffect} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport {Card, Icon, Button, Avatar, Input,List, Comment,Form} from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\r\nconst PostCard =({post}) => {\r\n    const dispatch = useDispatch();\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const {me} = useSelector(state => state.user);\r\n    const {commentAdded, isAddingComment} = useSelector(state => state.post); \r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n    },[]);\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if(!me){\r\n            return alert('로그인이 필요합니다.'); \r\n        }\r\n        dispatch({\r\n            type: ADD_COMMENT_REQUEST,\r\n            data:{\r\n                postId: post.id \r\n            }\r\n        });\r\n    },[me&&me.id]);\r\n\r\n    useEffect( () => {\r\n        setCommentText(''); \r\n    },[commentAdded ===true])\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value); \r\n    }, []);\r\n    return(\r\n        <div>\r\n        <Card \r\n            key={+post.createdAt}\r\n            cover={post.img && <img alt=\"example\" src={post.img} />}\r\n            actions={[\r\n                <Icon type=\"retweet\" key=\"retweet\" />,\r\n                <Icon type=\"heart\" key=\"heart\" />,\r\n                <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\r\n                <Icon type=\"ellipsis\" key=\"ellipsis\" />\r\n            ]}\r\n            extra={<Button>팔로우</Button>}\r\n        >\r\n            <Card.Meta\r\n                avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title={post.User.nickname}\r\n                description={<div>{post.content}</div>}\r\n            />\r\n        </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit = {onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value = {commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length: 0}댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem= {item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}                                                                                                                                                           \r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nPostCard.propTypes ={\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content:PropTypes.string,\r\n        img:PropTypes.string,\r\n        createdAt:PropTypes.object\r\n    })\r\n}\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}